{"ast":null,"code":"var _jsxFileName = \"/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/ProductEditScreen/ProductEditScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PRODUCT_UPDATE_RESET } from 'store/constants/productConstants';\nimport { listProductDetails, updateProduct } from 'store/actions/productActions';\nimport Loader from 'components/Loader';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Input from '@mui/material/Input';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport imaage from 'assets/detailBackground.jpg';\nimport axios from 'axios';\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductEditScreen = _ref => {\n  _s();\n\n  let {\n    match,\n    history\n  } = _ref;\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslations();\n  const productId = match.params.id;\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState('');\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState('');\n  const [type, setType] = useState('');\n  const [weight, setWeight] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const dispatch = useDispatch();\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    product\n  } = productDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    success: successUpdate\n  } = productUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      history.push('/admin/productList');\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n        setType(product.type);\n        setWeight(product.weight);\n      }\n    }\n  }, [product, dispatch, productId, history, successUpdate]);\n\n  const uploadFileHandler = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('image', image);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': `multipart/form-data`\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/upload', formData, config);\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      setUploading(false);\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateProduct({\n      _id: productId,\n      name,\n      price,\n      image,\n      brand,\n      category,\n      countInStock,\n      description\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.container,\n    style: {\n      background: `url(${imaage}) no-repeat center/cover`\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      className: classes.formController,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            bgcolor: 'secondary.main',\n            borderRadius: '0'\n          },\n          className: classes.logo,\n          children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes.title,\n          children: t('edit')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          sx: {\n            mt: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                autoComplete: \"given-name\",\n                name: \"firstName\",\n                required: true,\n                fullWidth: true,\n                id: \"firstName\",\n                label: t('name'),\n                type: \"name\",\n                value: name,\n                onChange: e => setName(e.target.value),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"price\",\n                label: t('price'),\n                type: \"number\",\n                name: \"price\",\n                autoComplete: \"price\",\n                value: price,\n                onChange: e => setPrice(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"contained-button-file\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  accept: \"image/*\",\n                  id: \"contained-button-file\",\n                  multiple: true,\n                  type: \"file\",\n                  onChange: e => setImage(e.target.files[0])\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  component: \"span\",\n                  onClick: uploadFileHandler,\n                  children: t('upload')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"brand\",\n                label: t('brand'),\n                type: \"text\",\n                name: \"brand\",\n                autoComplete: \"brand\",\n                value: brand,\n                onChange: e => setBrand(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"countInStock\",\n                label: t('count_in_stock'),\n                type: \"number\",\n                name: \"countInStock\",\n                autoComplete: \"countInStock\",\n                value: countInStock,\n                onChange: e => setCountInStock(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"category\",\n                label: t('category'),\n                type: \"text\",\n                name: \"category\",\n                autoComplete: \"category\",\n                value: category,\n                onChange: e => setCategory(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"type\",\n                label: t('type'),\n                type: \"text\",\n                name: \"type\",\n                autoComplete: \"type\",\n                value: type,\n                onChange: e => setType(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"weight\",\n                label: t('weight'),\n                type: \"text\",\n                name: \"weight\",\n                autoComplete: \"weight\",\n                value: weight,\n                onChange: e => setWeight(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"description\",\n                label: t('description'),\n                type: \"text\",\n                name: \"description\",\n                autoComplete: \"description\",\n                value: description,\n                onChange: e => setDescription(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            onClick: submitHandler,\n            variant: \"link\",\n            style: {\n              width: '100%',\n              marginTop: '30px'\n            },\n            children: t('update')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"link\",\n            component: Link,\n            to: \"/admin/productList\",\n            style: {\n              width: '100%',\n              marginTop: '30px'\n            },\n            children: t('go_back')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductEditScreen, \"UlprBnX3sT+tV76tyn5Z2lj+Klo=\", false, function () {\n  return [useStyles, useTranslations, useDispatch, useSelector, useSelector];\n});\n\n_c = ProductEditScreen;\nexport default ProductEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEditScreen\");","map":{"version":3,"sources":["/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/ProductEditScreen/ProductEditScreen.jsx"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","PRODUCT_UPDATE_RESET","listProductDetails","updateProduct","Loader","Box","Grid","Input","Avatar","Button","TextField","Container","LockOutlinedIcon","imaage","axios","useStyles","useTranslations","ProductEditScreen","match","history","classes","t","productId","params","id","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","type","setType","weight","setWeight","uploading","setUploading","dispatch","productDetails","state","loading","product","productUpdate","loadingUpdate","success","successUpdate","push","_id","uploadFileHandler","e","preventDefault","formData","FormData","append","config","headers","data","post","error","submitHandler","container","background","formController","display","flexDirection","alignItems","bgcolor","borderRadius","logo","title","mt","target","value","files","width","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,8BAAlD;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;;AAEA,MAAMC,iBAAiB,GAAG,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAuB;AAChD,QAAMC,OAAO,GAAGL,SAAS,EAAzB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAQL,eAAe,EAA7B;AAEA,QAAMM,SAAS,GAAGJ,KAAK,CAACK,MAAN,CAAaC,EAA/B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC+B,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACiC,KAAD,EAAQC,QAAR,IAAoBlC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmC,KAAD,EAAQC,QAAR,IAAoBpC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACqC,QAAD,EAAWC,WAAX,IAA0BtC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACuC,YAAD,EAAeC,eAAf,IAAkCxC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACyC,WAAD,EAAcC,cAAd,IAAgC1C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC2C,IAAD,EAAOC,OAAP,IAAkB5C,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC6C,MAAD,EAASC,SAAT,IAAsB9C,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMiD,QAAQ,GAAG9C,WAAW,EAA5B;AAEA,QAAM+C,cAAc,GAAG9C,WAAW,CAAC+C,KAAK,IAAIA,KAAK,CAACD,cAAhB,CAAlC;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBH,cAA7B;AAEA,QAAMI,aAAa,GAAGlD,WAAW,CAAC+C,KAAK,IAAIA,KAAK,CAACG,aAAhB,CAAjC;AACA,QAAM;AACJF,IAAAA,OAAO,EAAEG,aADL;AAEJC,IAAAA,OAAO,EAAEC;AAFL,MAGFH,aAHJ;AAKArD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwD,aAAJ,EAAmB;AACjBR,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAEtC;AAAR,OAAD,CAAR;AACAkB,MAAAA,OAAO,CAACmC,IAAR,CAAa,oBAAb;AACD,KAHD,MAGO;AACL,UAAI,CAACL,OAAO,CAACxB,IAAT,IAAiBwB,OAAO,CAACM,GAAR,KAAgBjC,SAArC,EAAgD;AAC9CuB,QAAAA,QAAQ,CAAC3C,kBAAkB,CAACoB,SAAD,CAAnB,CAAR;AACD,OAFD,MAEO;AACLI,QAAAA,OAAO,CAACuB,OAAO,CAACxB,IAAT,CAAP;AACAG,QAAAA,QAAQ,CAACqB,OAAO,CAACtB,KAAT,CAAR;AACAG,QAAAA,QAAQ,CAACmB,OAAO,CAACpB,KAAT,CAAR;AACAG,QAAAA,QAAQ,CAACiB,OAAO,CAAClB,KAAT,CAAR;AACAG,QAAAA,WAAW,CAACe,OAAO,CAAChB,QAAT,CAAX;AACAG,QAAAA,eAAe,CAACa,OAAO,CAACd,YAAT,CAAf;AACAG,QAAAA,cAAc,CAACW,OAAO,CAACZ,WAAT,CAAd;AACAG,QAAAA,OAAO,CAACS,OAAO,CAACV,IAAT,CAAP;AACAG,QAAAA,SAAS,CAACO,OAAO,CAACR,MAAT,CAAT;AACD;AACF;AACF,GAnBQ,EAmBN,CAACQ,OAAD,EAAUJ,QAAV,EAAoBvB,SAApB,EAA+BH,OAA/B,EAAwCkC,aAAxC,CAnBM,CAAT;;AAqBA,QAAMG,iBAAiB,GAAG,MAAMC,CAAN,IAAW;AACnCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBhC,KAAzB;;AAEA,QAAI;AACF,YAAMiC,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACP,0BAAiB;AADV;AADI,OAAf;AAMA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMlD,KAAK,CAACmD,IAAN,CACrB,aADqB,EAErBN,QAFqB,EAGrBG,MAHqB,CAAvB;AAKAhC,MAAAA,QAAQ,CAACkC,IAAD,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdD,CAcE,OAAOsB,KAAP,EAAc;AACdtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAtBD;;AAwBA,QAAMuB,aAAa,GAAGV,CAAC,IAAI;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAb,IAAAA,QAAQ,CACN1C,aAAa,CAAC;AACZoD,MAAAA,GAAG,EAAEjC,SADO;AAEZG,MAAAA,IAFY;AAGZE,MAAAA,KAHY;AAIZE,MAAAA,KAJY;AAKZE,MAAAA,KALY;AAMZE,MAAAA,QANY;AAOZE,MAAAA,YAPY;AAQZE,MAAAA;AARY,KAAD,CADP,CAAR;AAYD,GAdD;;AAgBA,sBACE,QAAC,SAAD;AACE,IAAA,SAAS,EAAEjB,OAAO,CAACgD,SADrB;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAG,OAAMxD,MAAO;AAA5B,KAFT;AAAA,2BAIE,QAAC,SAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,QAAQ,EAAC,IAFX;AAGE,MAAA,SAAS,EAAEO,OAAO,CAACkD,cAHrB;AAAA,6BAKE,QAAC,GAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,OAAO,EAAE,MADP;AAEFC,UAAAA,aAAa,EAAE,QAFb;AAGFC,UAAAA,UAAU,EAAE;AAHV,SADN;AAAA,gCAOE,QAAC,MAAD;AACE,UAAA,EAAE,EAAE;AAAEC,YAAAA,OAAO,EAAE,gBAAX;AAA6BC,YAAAA,YAAY,EAAE;AAA3C,WADN;AAEE,UAAA,SAAS,EAAEvD,OAAO,CAACwD,IAFrB;AAAA,iCAIE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAaE;AAAI,UAAA,SAAS,EAAExD,OAAO,CAACyD,KAAvB;AAAA,oBAA+BxD,CAAC,CAAC,MAAD;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAbF,EAcG8B,aAAa,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAdpB,EAeGH,OAAO,gBACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADM,gBAGN,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,UAAU,MAAhC;AAAiC,UAAA,EAAE,EAAE;AAAE8B,YAAAA,EAAE,EAAE;AAAN,WAArC;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,OAAO,EAAE,CAAzB;AAAA,oCACE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,YAAY,EAAC,YADf;AAEE,gBAAA,IAAI,EAAC,WAFP;AAGE,gBAAA,QAAQ,MAHV;AAIE,gBAAA,SAAS,MAJX;AAKE,gBAAA,EAAE,EAAC,WALL;AAME,gBAAA,KAAK,EAAEzD,CAAC,CAAC,MAAD,CANV;AAOE,gBAAA,IAAI,EAAC,MAPP;AAQE,gBAAA,KAAK,EAAEI,IART;AASE,gBAAA,QAAQ,EAAEgC,CAAC,IAAI/B,OAAO,CAAC+B,CAAC,CAACsB,MAAF,CAASC,KAAV,CATxB;AAUE,gBAAA,SAAS;AAVX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAeE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,OAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,OAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,QALP;AAME,gBAAA,IAAI,EAAC,OANP;AAOE,gBAAA,YAAY,EAAC,OAPf;AAQE,gBAAA,KAAK,EAAEM,KART;AASE,gBAAA,QAAQ,EAAE8B,CAAC,IAAI7B,QAAQ,CAAC6B,CAAC,CAACsB,MAAF,CAASC,KAAV;AATzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAfF,eA4BE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE;AAAO,gBAAA,OAAO,EAAC,uBAAf;AAAA,wCACE,QAAC,KAAD;AACE,kBAAA,MAAM,EAAC,SADT;AAEE,kBAAA,EAAE,EAAC,uBAFL;AAGE,kBAAA,QAAQ,MAHV;AAIE,kBAAA,IAAI,EAAC,MAJP;AAKE,kBAAA,QAAQ,EAAGvB,CAAD,IAAO3B,QAAQ,CAAC2B,CAAC,CAACsB,MAAF,CAASE,KAAT,CAAe,CAAf,CAAD;AAL3B;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,MAAD;AACA,kBAAA,OAAO,EAAC,WADR;AAEA,kBAAA,SAAS,EAAC,MAFV;AAGA,kBAAA,OAAO,EAAEzB,iBAHT;AAAA,4BAKGnC,CAAC,CAAC,QAAD;AALJ;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA5BF,eA8CE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,OAHL;AAIE,gBAAA,KAAK,EAAEA,CAAC,CAAC,OAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,MALP;AAME,gBAAA,IAAI,EAAC,OANP;AAOE,gBAAA,YAAY,EAAC,OAPf;AAQE,gBAAA,KAAK,EAAEU,KART;AASE,gBAAA,QAAQ,EAAE0B,CAAC,IAAIzB,QAAQ,CAACyB,CAAC,CAACsB,MAAF,CAASC,KAAV;AATzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA9CF,eA2DE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,cAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,gBAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,QALP;AAME,gBAAA,IAAI,EAAC,cANP;AAOE,gBAAA,YAAY,EAAC,cAPf;AAQE,gBAAA,KAAK,EAAEc,YART;AASE,gBAAA,QAAQ,EAAEsB,CAAC,IAAIrB,eAAe,CAACqB,CAAC,CAACsB,MAAF,CAASC,KAAV;AAThC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA3DF,eAwEE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,UAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,UAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,MALP;AAME,gBAAA,IAAI,EAAC,UANP;AAOE,gBAAA,YAAY,EAAC,UAPf;AAQE,gBAAA,KAAK,EAAEY,QART;AASE,gBAAA,QAAQ,EAAEwB,CAAC,IAAIvB,WAAW,CAACuB,CAAC,CAACsB,MAAF,CAASC,KAAV;AAT5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAxEF,eAqFE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,MAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,MAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,MALP;AAME,gBAAA,IAAI,EAAC,MANP;AAOE,gBAAA,YAAY,EAAC,MAPf;AAQE,gBAAA,KAAK,EAAEkB,IART;AASE,gBAAA,QAAQ,EAAEkB,CAAC,IAAIjB,OAAO,CAACiB,CAAC,CAACsB,MAAF,CAASC,KAAV;AATxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBArFF,eAkGE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,QAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,QAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,MALP;AAME,gBAAA,IAAI,EAAC,QANP;AAOE,gBAAA,YAAY,EAAC,QAPf;AAQE,gBAAA,KAAK,EAAEoB,MART;AASE,gBAAA,QAAQ,EAAEgB,CAAC,IAAIf,SAAS,CAACe,CAAC,CAACsB,MAAF,CAASC,KAAV;AAT1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAlGF,eA+GE,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,SAAD;AACE,gBAAA,QAAQ,MADV;AAEE,gBAAA,SAAS,MAFX;AAGE,gBAAA,EAAE,EAAC,aAHL;AAIE,gBAAA,KAAK,EAAE3D,CAAC,CAAC,aAAD,CAJV;AAKE,gBAAA,IAAI,EAAC,MALP;AAME,gBAAA,IAAI,EAAC,aANP;AAOE,gBAAA,YAAY,EAAC,aAPf;AAQE,gBAAA,KAAK,EAAEgB,WART;AASE,gBAAA,QAAQ,EAAEoB,CAAC,IAAInB,cAAc,CAACmB,CAAC,CAACsB,MAAF,CAASC,KAAV;AAT/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA/GF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eA8HE,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,SAAS,MAFX;AAGE,YAAA,OAAO,EAAEb,aAHX;AAIE,YAAA,OAAO,EAAC,MAJV;AAKE,YAAA,KAAK,EAAE;AAAEe,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,SAAS,EAAE;AAA5B,aALT;AAAA,sBAOG9D,CAAC,CAAC,QAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,kBA9HF,eAuIE,QAAC,MAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,OAAO,EAAC,MAFV;AAGE,YAAA,SAAS,EAAEvB,IAHb;AAIE,YAAA,EAAE,EAAC,oBAJL;AAKE,YAAA,KAAK,EAAE;AAAEoF,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,SAAS,EAAE;AAA5B,aALT;AAAA,sBAOG9D,CAAC,CAAC,SAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,kBAvIF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAkLD,CA3QD;;GAAMJ,iB;UACYF,S,EACFC,e,EAeGjB,W,EAEMC,W,EAGDA,W;;;KAtBlBiB,iB;AA6QN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PRODUCT_UPDATE_RESET } from 'store/constants/productConstants';\nimport { listProductDetails, updateProduct } from 'store/actions/productActions';\n\nimport Loader from 'components/Loader';\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Input from '@mui/material/Input';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nimport imaage from 'assets/detailBackground.jpg';\n\nimport axios from 'axios';\n\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\n\nconst ProductEditScreen = ({ match, history }) => {\n  const classes = useStyles();\n  const { t } = useTranslations();\n\n  const productId = match.params.id;\n\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState('');\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState(0);\n  const [description, setDescription] = useState('');\n  const [type, setType] = useState('');\n  const [weight, setWeight] = useState('');\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const productDetails = useSelector(state => state.productDetails);\n  const { loading, product } = productDetails;\n\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n      history.push('/admin/productList');\n    } else {\n      if (!product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n        setType(product.type)\n        setWeight(product.weight)\n      }\n    }\n  }, [product, dispatch, productId, history, successUpdate]);\n\n  const uploadFileHandler = async e => {\n    e.preventDefault()\n    const formData = new FormData();\n    formData.append('image', image);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': `multipart/form-data`,\n        },\n      };\n\n      const { data } = await axios.post(\n        '/api/upload',\n        formData,\n        config\n      );\n      setImage(data)\n      setUploading(false);\n    } catch (error) {\n      setUploading(false);\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        image,\n        brand,\n        category,\n        countInStock,\n        description,\n      })\n    );\n  };\n\n  return (\n    <Container\n      className={classes.container}\n      style={{ background: `url(${imaage}) no-repeat center/cover` }}\n    >\n      <Container\n        component='main'\n        maxWidth='xs'\n        className={classes.formController}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar\n            sx={{ bgcolor: 'secondary.main', borderRadius: '0' }}\n            className={classes.logo}\n          >\n            <LockOutlinedIcon />\n          </Avatar>\n          <h3 className={classes.title}>{t('edit')}</h3>\n          {loadingUpdate && <Loader />}\n          {loading ? (\n            <Loader />\n          ) : (\n            <Box component='form' noValidate sx={{ mt: 3 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    autoComplete='given-name'\n                    name='firstName'\n                    required\n                    fullWidth\n                    id='firstName'\n                    label={t('name')}\n                    type='name'\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                    autoFocus\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='price'\n                    label={t('price')}\n                    type='number'\n                    name='price'\n                    autoComplete='price'\n                    value={price}\n                    onChange={e => setPrice(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <label htmlFor='contained-button-file'>\n                    <Input\n                      accept='image/*'\n                      id='contained-button-file'\n                      multiple\n                      type='file'\n                      onChange={(e) => setImage(e.target.files[0])}\n                    />\n                    <Button\n                    variant='contained'\n                    component='span'\n                    onClick={uploadFileHandler}\n                    >\n                      {t('upload')}\n                    </Button>\n                  </label>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='brand'\n                    label={t('brand')}\n                    type='text'\n                    name='brand'\n                    autoComplete='brand'\n                    value={brand}\n                    onChange={e => setBrand(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='countInStock'\n                    label={t('count_in_stock')}\n                    type='number'\n                    name='countInStock'\n                    autoComplete='countInStock'\n                    value={countInStock}\n                    onChange={e => setCountInStock(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='category'\n                    label={t('category')}\n                    type='text'\n                    name='category'\n                    autoComplete='category'\n                    value={category}\n                    onChange={e => setCategory(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='type'\n                    label={t('type')}\n                    type='text'\n                    name='type'\n                    autoComplete='type'\n                    value={type}\n                    onChange={e => setType(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='weight'\n                    label={t('weight')}\n                    type='text'\n                    name='weight'\n                    autoComplete='weight'\n                    value={weight}\n                    onChange={e => setWeight(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    id='description'\n                    label={t('description')}\n                    type='text'\n                    name='description'\n                    autoComplete='description'\n                    value={description}\n                    onChange={e => setDescription(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                type='submit'\n                fullWidth\n                onClick={submitHandler}\n                variant='link'\n                style={{ width: '100%', marginTop: '30px' }}\n              >\n                {t('update')}\n              </Button>\n              <Button\n                fullWidth\n                variant='link'\n                component={Link}\n                to='/admin/productList'\n                style={{ width: '100%', marginTop: '30px' }}\n              >\n                {t('go_back')}\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </Container>\n  );\n};\n\nexport default ProductEditScreen;\n"]},"metadata":{},"sourceType":"module"}
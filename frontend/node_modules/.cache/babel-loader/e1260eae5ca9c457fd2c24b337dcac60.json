{"ast":null,"code":"var _jsxFileName = \"/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/contexts/translation.context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useState } from 'react';\nimport translations from './translations.json';\nimport { languages } from './languages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst browserLang = navigator.language.split('-')[0];\nconst isSupported = Object.values(languages).includes(browserLang);\nconst TranslationContext = /*#__PURE__*/createContext(isSupported ? browserLang : languages.en);\n\nfunction TranslationProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentLang, setLang] = useState(isSupported ? browserLang : languages.en);\n  const setLanguage = useCallback(lang => {\n    setLang(lang);\n  }, [setLang]);\n  const t = useCallback(key => {\n    return translations[currentLang][key];\n  }, [currentLang]);\n  return /*#__PURE__*/_jsxDEV(TranslationContext.Provider, {\n    value: {\n      setLanguage,\n      t,\n      lang: currentLang,\n      supportedLanguages: languages\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TranslationProvider, \"KNxFkXoV3qDf99KpSYtUFQJIPPc=\");\n\n_c = TranslationProvider;\nexport const useTranslations = () => {\n  _s2();\n\n  const context = useContext(TranslationContext);\n  return context;\n};\n\n_s2(useTranslations, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport default TranslationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslationProvider\");","map":{"version":3,"sources":["/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/contexts/translation.context.js"],"names":["createContext","useCallback","useContext","useState","translations","languages","browserLang","navigator","language","split","isSupported","Object","values","includes","TranslationContext","en","TranslationProvider","children","currentLang","setLang","setLanguage","lang","t","key","supportedLanguages","useTranslations","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,UAArC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,WAAW,GAAGC,SAAS,CAACC,QAAV,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAApB;AAEA,MAAMC,WAAW,GAAIC,MAAM,CAACC,MAAP,CAAcP,SAAd,EAAyBQ,QAAzB,CAAkCP,WAAlC,CAArB;AAEA,MAAMQ,kBAAkB,gBAAGd,aAAa,CAACU,WAAW,GAAGJ,WAAH,GAAiBD,SAAS,CAACU,EAAvC,CAAxC;;AAEA,SAASC,mBAAT,OAA2C;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACzC,QAAM,CAACC,WAAD,EAAcC,OAAd,IAAyBhB,QAAQ,CAACO,WAAW,GAAGJ,WAAH,GAAiBD,SAAS,CAACU,EAAvC,CAAvC;AAEA,QAAMK,WAAW,GAAGnB,WAAW,CAAEoB,IAAD,IAAU;AACxCF,IAAAA,OAAO,CAACE,IAAD,CAAP;AACD,GAF8B,EAE5B,CAACF,OAAD,CAF4B,CAA/B;AAIA,QAAMG,CAAC,GAAGrB,WAAW,CAAEsB,GAAD,IAAS;AAC7B,WAAOnB,YAAY,CAACc,WAAD,CAAZ,CAA0BK,GAA1B,CAAP;AACD,GAFoB,EAElB,CAACL,WAAD,CAFkB,CAArB;AAIA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEE,MAAAA,WAAF;AAAeE,MAAAA,CAAf;AAAkBD,MAAAA,IAAI,EAAEH,WAAxB;AAAqCM,MAAAA,kBAAkB,EAAEnB;AAAzD,KAApC;AAAA,cAA2GY;AAA3G;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAdQD,mB;;KAAAA,mB;AAgBT,OAAO,MAAMS,eAAe,GAAG,MAAM;AAAA;;AACnC,QAAMC,OAAO,GAAGxB,UAAU,CAACY,kBAAD,CAA1B;AAEA,SAAOY,OAAP;AACD,CAJM;;IAAMD,e;;AAMb,eAAeT,mBAAf","sourcesContent":["import { createContext, useCallback, useContext, useState } from 'react';\nimport translations from './translations.json';\nimport { languages } from './languages';\n\nconst browserLang = navigator.language.split('-')[0];\n\nconst isSupported  = Object.values(languages).includes(browserLang);\n\nconst TranslationContext = createContext(isSupported ? browserLang : languages.en);\n\nfunction TranslationProvider({ children }) {\n  const [currentLang, setLang] = useState(isSupported ? browserLang : languages.en);\n\n  const setLanguage = useCallback((lang) => {\n    setLang(lang);\n  }, [setLang]);\n\n  const t = useCallback((key) => {\n    return translations[currentLang][key];\n  }, [currentLang]);\n\n  return (\n    <TranslationContext.Provider value={{ setLanguage, t, lang: currentLang, supportedLanguages: languages }}>{children}</TranslationContext.Provider>\n  );\n}\n\nexport const useTranslations = () => {\n  const context = useContext(TranslationContext);\n\n  return context;\n}\n\nexport default TranslationProvider;"]},"metadata":{},"sourceType":"module"}
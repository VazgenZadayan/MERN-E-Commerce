{"ast":null,"code":"import axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_DETAILS_RESET, USER_LIST_FAIL, USER_LIST_SUCCESS, USER_LIST_REQUEST, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_REQUEST } from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { toast } from 'react-toastify';\naxios.interceptors.response.use(config => {\n  if (config.status >= 400) {\n    toast.error(config.data.message);\n  }\n\n  return config;\n});\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  localStorage.removeItem('paymentMethod');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  document.location.href = '/login';\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    toast.success('You have successfully registered');\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    toast.error(`${error.response.data.message}`);\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n    toast.error(`${error.response.data.message}`);\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n    toast.error(`${error.response.data.message}`);\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n    toast.success(`${'User deleted succesfully'}`);\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n    toast.error(`${error}`);\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    toast.success('User Updated Successfully');\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n    toast.error(`${message}`);\n  }\n};","map":{"version":3,"sources":["/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/store/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_DETAILS_RESET","USER_LIST_FAIL","USER_LIST_SUCCESS","USER_LIST_REQUEST","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_REQUEST","ORDER_LIST_MY_RESET","toast","interceptors","response","use","config","status","error","data","message","login","email","password","dispatch","type","headers","post","payload","localStorage","setItem","JSON","stringify","logout","removeItem","document","location","href","register","name","success","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","listUsers","deleteUser","delete","updateUser","user","put","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_DETAILS_RESET,\n  USER_LIST_FAIL,\n  USER_LIST_SUCCESS,\n  USER_LIST_REQUEST,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_UPDATE_FAIL,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_REQUEST,\n} from '../constants/userConstants'\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\nimport { toast } from 'react-toastify'\n\naxios.interceptors.response.use((config) => {\n  if (config.status >= 400) {\n    toast.error(config.data.message);\n  }\n  return config;\n})\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const { data } = await axios.post(\n      '/api/users/login',\n      { email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    })\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  localStorage.removeItem('cartItems')\n  localStorage.removeItem('shippingAddress')\n  localStorage.removeItem('paymentMethod')\n  dispatch({ type: USER_LOGOUT })\n  dispatch({ type: USER_DETAILS_RESET })\n  dispatch({ type: ORDER_LIST_MY_RESET })\n  dispatch({ type: USER_LIST_RESET })\n  document.location.href = '/login'\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const { data } = await axios.post(\n      '/api/users',\n      { name, email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    })\n    toast.success('You have successfully registered');\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    })\n\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n    toast.error(`${error.response.data.message}`);\n  }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/users/${id}`, config)\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message,\n    })\n    toast.error(`${error.response.data.message}`);\n  }\n}\n\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/users`, config)\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message,\n    })\n    toast.error(`${error.response.data.message}`);\n  }\n}\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/users/${id}`, config)\n\n    dispatch({ type: USER_DELETE_SUCCESS });\n    toast.success(`${'User deleted succesfully'}`)\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message,\n    })\n    toast.error(`${error}`);\n  }\n}\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`/api/users/${user._id}`, user, config)\n\n    dispatch({ type: USER_UPDATE_SUCCESS })\n    toast.success('User Updated Successfully');\n\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n\n    dispatch({ type: USER_DETAILS_RESET })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message,\n    })\n    toast.error(`${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
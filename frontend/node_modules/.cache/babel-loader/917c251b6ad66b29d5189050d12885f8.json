{"ast":null,"code":"var _jsxFileName = \"/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/LoginScreen/LoginScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../store/actions/userActions';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { loginValidationSchema } from 'hooks/validator';\nimport Loader from '../../components/Loader';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport image from 'assets/detailBackground.jpg';\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginScreen = _ref => {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  let {\n    location,\n    history\n  } = _ref;\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isValid\n    }\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(loginValidationSchema)\n  });\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslations();\n  const dispatch = useDispatch();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    loading,\n    userInfo\n  } = userLogin;\n  const redirect = location.search ? location.search.split('=')[1] : '/';\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect);\n    }\n  }, [history, userInfo, redirect]);\n\n  const submitHandler = _ref2 => {\n    let {\n      email,\n      password\n    } = _ref2;\n    dispatch(login(email, password));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: classes.container,\n    style: {\n      background: `url(${image}) no-repeat center/cover`\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      className: classes.formController,\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        sx: {\n          bgcolor: 'secondary.main',\n          borderRadius: '0'\n        },\n        className: classes.logo,\n        children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes.title,\n        children: t('sign_in')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit(submitHandler),\n        noValidate: true,\n        color: \"primary\",\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          fullWidth: true,\n          id: \"email\",\n          label: t('email_address'),\n          name: \"email\",\n          autoComplete: \"email\",\n          autoFocus: true,\n          type: \"email\",\n          ...register('email'),\n          error: (errors === null || errors === void 0 ? void 0 : errors.email) ? true : false,\n          helperText: (errors === null || errors === void 0 ? void 0 : errors.email) && ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          name: \"password\",\n          label: t('password'),\n          type: \"password\",\n          color: \"primary\",\n          id: \"password\",\n          ...register('password'),\n          error: (errors === null || errors === void 0 ? void 0 : errors.password) ? true : false,\n          helperText: (errors === null || errors === void 0 ? void 0 : errors.password) && ((_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message),\n          autoComplete: \"current-password\",\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          disabled: !isValid,\n          variant: \"link\",\n          style: {\n            width: '100%'\n          },\n          children: t('sign_in')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: redirect ? `/register?redirect=${redirect}` : '/register',\n              variant: \"body2\",\n              style: {\n                color: 'rgba(255, 255, 255, 0.6)'\n              },\n              children: t('dont_have_account')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginScreen, \"RQq0eF7GzekC3/GSRwDt/cjHKog=\", false, function () {\n  return [useForm, useStyles, useTranslations, useDispatch, useSelector];\n});\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/LoginScreen/LoginScreen.jsx"],"names":["React","useEffect","Link","useDispatch","useSelector","login","InputAdornment","VisibilityIcon","yupResolver","useForm","loginValidationSchema","Loader","Box","Grid","Button","Avatar","Container","TextField","LockOutlinedIcon","image","useStyles","useTranslations","LoginScreen","location","history","register","handleSubmit","formState","errors","isValid","mode","resolver","classes","t","dispatch","userLogin","state","loading","userInfo","redirect","search","split","push","submitHandler","email","password","container","background","formController","bgcolor","borderRadius","logo","title","mt","message","width","color"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../store/actions/userActions';\nimport InputAdornment from '@mui/material/InputAdornment'\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { loginValidationSchema } from 'hooks/validator'\nimport Loader from '../../components/Loader';\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nimport image from 'assets/detailBackground.jpg';\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\n\nconst LoginScreen = ({ location, history }) => {\n\n  const { register, handleSubmit, formState: {errors, isValid} } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(loginValidationSchema)\n  });\n  const classes = useStyles();\n  const { t } = useTranslations();\n\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector(state => state.userLogin);\n  const { loading, userInfo } = userLogin;\n\n  const redirect = location.search ? location.search.split('=')[1] : '/';\n\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect);\n    }\n  }, [history, userInfo, redirect]);\n\n  const submitHandler = ({email, password}) => {\n    dispatch(login(email,password));\n  };\n\n  return (\n    <Grid\n      container\n      className={classes.container}\n      style={{\n        background: `url(${image}) no-repeat center/cover`,\n      }}\n    >\n      <Container\n        component='main'\n        maxWidth='xs'\n        className={classes.formController}\n      >\n        <Avatar\n          sx={{ bgcolor: 'secondary.main', borderRadius: '0' }}\n          className={classes.logo}\n        >\n          <LockOutlinedIcon color='primary'/>\n        </Avatar>\n        <h3 className={classes.title}>{t('sign_in')}</h3>\n        {loading ? (\n          <Loader />\n        ) : (\n          <Box\n            component='form'\n            onSubmit={handleSubmit(submitHandler)}\n            noValidate\n            color='primary'\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin='normal'\n              fullWidth\n              id='email'\n              label={t('email_address')}\n              name='email'\n              autoComplete='email'\n              autoFocus\n              type='email'\n              {...register('email')}\n              error={errors?.email ? true : false}\n              helperText={errors?.email && errors.email?.message}\n            />\n            <TextField\n              margin='normal'\n              required\n              fullWidth\n              name='password'\n              label={t('password')}\n              type='password'\n              color='primary'\n              id='password'\n              {...register('password')}\n              error={errors?.password ? true : false}\n              helperText={errors?.password && errors.password?.message}\n              autoComplete='current-password'\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <VisibilityIcon />\n                </InputAdornment>\n              }\n            />\n            <Button\n              type='submit'\n              fullWidth\n              disabled={!isValid}\n              variant='link'\n              style={{ width: '100%' }}\n            >\n              {t('sign_in')}\n            </Button>\n            <Grid container>\n              <Grid item mt={4}>\n                <Link\n                  to={redirect ? `/register?redirect=${redirect}` : '/register'}\n                  variant='body2'\n                  style={{ color: 'rgba(255, 255, 255, 0.6)' }}\n                >\n                  {t('dont_have_account')}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n      </Container>\n    </Grid>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/RegistrationScreen/RegistrationScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'store/actions/userActions';\nimport Loader from 'components/Loader';\nimport Message from 'components/Message';\nimport { registerValidationSchema } from 'hooks/validator';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport image from 'assets/detailBackground.jpg';\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegistrationScreen = _ref => {\n  _s();\n\n  let {\n    location,\n    history\n  } = _ref;\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslations();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(loginValidationSchema)\n  });\n  const dispatch = useDispatch();\n  const userRegister = useSelector(state => state.userRegister);\n  const {\n    loading,\n    error,\n    userInfo\n  } = userRegister;\n  const redirect = location.search ? location.search.split('=')[1] : '/';\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect);\n    }\n  }, [history, userInfo, redirect]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      setMessage('Passwords do not match');\n    } else {\n      dispatch(register(name, email, password));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.container,\n    style: {\n      background: `url(${image}) no-repeat center/cover`\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      className: classes.formController,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            bgcolor: 'secondary.main',\n            borderRadius: '0'\n          },\n          className: classes.logo,\n          children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes.title,\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 23\n        }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          onSubmit: submitHandler,\n          sx: {\n            mt: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                autoComplete: \"given-name\",\n                name: \"firstName\",\n                required: true,\n                fullWidth: true,\n                id: \"firstName\",\n                label: t('name'),\n                type: \"name\",\n                value: name,\n                onChange: e => setName(e.target.value),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"email\",\n                label: t('email_address'),\n                type: \"email\",\n                name: \"email\",\n                autoComplete: \"email\",\n                value: email,\n                onChange: e => setEmail(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                name: \"password\",\n                label: t('password'),\n                type: \"password\",\n                id: \"password\",\n                value: password,\n                onChange: e => setPassword(e.target.value),\n                autoComplete: \"on\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                fullWidth: true,\n                id: \"confirmPassword\",\n                label: t('confirm_password'),\n                type: \"password\",\n                autoComplete: \"on\",\n                value: confirmPassword,\n                onChange: e => setConfirmPassword(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"link\",\n            style: {\n              width: '100%',\n              marginTop: '30px'\n            },\n            disabled: password !== confirmPassword,\n            children: t('sign_up')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justifyContent: \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                marginTop: '10px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: redirect ? `/login?redirect=${redirect}` : '/login',\n                variant: \"body2\",\n                style: {\n                  color: 'white'\n                },\n                children: t('already_have_account')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegistrationScreen, \"RWNy0L2WBttadtTpbdBCqXHiEwg=\", true, function () {\n  return [useStyles, useTranslations, useDispatch, useSelector];\n});\n\n_c = RegistrationScreen;\nexport default RegistrationScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationScreen\");","map":{"version":3,"sources":["/Users/vazgenzadayan/Documents/Projects/online_shop/frontend/src/screens/RegistrationScreen/RegistrationScreen.jsx"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","register","Loader","Message","registerValidationSchema","Box","Grid","Avatar","Button","TextField","Container","LockOutlinedIcon","image","useStyles","useTranslations","RegistrationScreen","location","history","classes","t","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","handleSubmit","formState","errors","useForm","mode","resolver","yupResolver","loginValidationSchema","dispatch","userRegister","state","loading","error","userInfo","redirect","search","split","push","submitHandler","e","preventDefault","container","background","formController","display","flexDirection","alignItems","bgcolor","borderRadius","logo","title","mt","target","value","width","marginTop","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'store/actions/userActions';\n\nimport Loader from 'components/Loader';\nimport Message from 'components/Message';\nimport { registerValidationSchema } from 'hooks/validator';\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nimport image from 'assets/detailBackground.jpg';\n\nimport useStyles from './styles';\nimport { useTranslations } from 'contexts/translation.context';\n\nconst RegistrationScreen = ({ location, history }) => {\n  const classes = useStyles();\n  const { t } = useTranslations();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n\n  const { register, handleSubmit, formState: {errors} } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(loginValidationSchema)\n  });\n\n  const dispatch = useDispatch();\n\n  const userRegister = useSelector(state => state.userRegister);\n  const { loading, error, userInfo } = userRegister;\n\n  const redirect = location.search ? location.search.split('=')[1] : '/';\n\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect);\n    }\n  }, [history, userInfo, redirect]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setMessage('Passwords do not match');\n    } else {\n      dispatch(register(name, email, password));\n    }\n  };\n\n  return (\n    <Container\n      className={classes.container}\n      style={{ background: `url(${image}) no-repeat center/cover` }}\n    >\n      <Container\n        component='main'\n        maxWidth='xs'\n        className={classes.formController}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar\n            sx={{ bgcolor: 'secondary.main', borderRadius: '0' }}\n            className={classes.logo}\n          >\n            <LockOutlinedIcon />\n          </Avatar>\n          <h3 className={classes.title}>Sign up</h3>\n          {message && <Message variant='danger'>{message}</Message>}\n          {error && <Message variant='danger'>{error}</Message>}\n          {loading && <Loader />}\n          <Box\n            component='form'\n            noValidate\n            onSubmit={submitHandler}\n            sx={{ mt: 3 }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete='given-name'\n                  name='firstName'\n                  required\n                  fullWidth\n                  id='firstName'\n                  label={t('name')}\n                  type='name'\n                  value={name}\n                  onChange={e => setName(e.target.value)}\n                  autoFocus\n                  \n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  fullWidth\n                  id='email'\n                  label={t('email_address')}\n                  type='email'\n                  name='email'\n                  autoComplete='email'\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  name='password'\n                  label={t('password')}\n                  type='password'\n                  id='password'\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                  autoComplete='on'\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id='confirmPassword'\n                  label={t('confirm_password')}\n                  type='password'\n                  autoComplete='on'\n                  value={confirmPassword}\n                  onChange={e => setConfirmPassword(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type='submit'\n              fullWidth\n              variant='link'\n              style={{ width: '100%', marginTop: '30px' }}\n              disabled={password !== confirmPassword}\n            >\n              {t('sign_up')}\n            </Button>\n            <Grid container justifyContent='flex-end'>\n              <Grid item style={{ marginTop: '10px' }}>\n                <Link\n                  to={redirect ? `/login?redirect=${redirect}` : '/login'}\n                  variant='body2'\n                  style={{ color: 'white' }}\n                >\n                  {t('already_have_account')}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </Container>\n  );\n};\n\nexport default RegistrationScreen;\n"]},"metadata":{},"sourceType":"module"}